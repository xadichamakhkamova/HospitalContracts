// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: protos/nurse-service/nurse-service.proto

package nursepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	NurseService_CreateDonor_FullMethodName      = "/NurseService/CreateDonor"
	NurseService_GetDonorById_FullMethodName     = "/NurseService/GetDonorById"
	NurseService_ListDonors_FullMethodName       = "/NurseService/ListDonors"
	NurseService_UpdateDonor_FullMethodName      = "/NurseService/UpdateDonor"
	NurseService_DeleteDonor_FullMethodName      = "/NurseService/DeleteDonor"
	NurseService_RegisterDonation_FullMethodName = "/NurseService/RegisterDonation"
	NurseService_RegisterCheckup_FullMethodName  = "/NurseService/RegisterCheckup"
)

// NurseServiceClient is the client API for NurseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ---------------- Service ----------------
type NurseServiceClient interface {
	// Donor
	CreateDonor(ctx context.Context, in *CreateDonorRequest, opts ...grpc.CallOption) (*CreateDonorResponse, error)
	GetDonorById(ctx context.Context, in *GetDonorByIdRequest, opts ...grpc.CallOption) (*GetDonorByIdResponse, error)
	ListDonors(ctx context.Context, in *ListDonorsRequest, opts ...grpc.CallOption) (*ListDonorsResponse, error)
	UpdateDonor(ctx context.Context, in *UpdateDonorRequest, opts ...grpc.CallOption) (*UpdateDonorResponse, error)
	DeleteDonor(ctx context.Context, in *DeleteDonorRequest, opts ...grpc.CallOption) (*DeleteDonorResponse, error)
	// EVENTS
	RegisterDonation(ctx context.Context, in *RegisterDonationRequest, opts ...grpc.CallOption) (*RegisterDonationResponse, error)
	RegisterCheckup(ctx context.Context, in *RegisterCheckupRequest, opts ...grpc.CallOption) (*RegisterCheckupResponse, error)
}

type nurseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNurseServiceClient(cc grpc.ClientConnInterface) NurseServiceClient {
	return &nurseServiceClient{cc}
}

func (c *nurseServiceClient) CreateDonor(ctx context.Context, in *CreateDonorRequest, opts ...grpc.CallOption) (*CreateDonorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDonorResponse)
	err := c.cc.Invoke(ctx, NurseService_CreateDonor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nurseServiceClient) GetDonorById(ctx context.Context, in *GetDonorByIdRequest, opts ...grpc.CallOption) (*GetDonorByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDonorByIdResponse)
	err := c.cc.Invoke(ctx, NurseService_GetDonorById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nurseServiceClient) ListDonors(ctx context.Context, in *ListDonorsRequest, opts ...grpc.CallOption) (*ListDonorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDonorsResponse)
	err := c.cc.Invoke(ctx, NurseService_ListDonors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nurseServiceClient) UpdateDonor(ctx context.Context, in *UpdateDonorRequest, opts ...grpc.CallOption) (*UpdateDonorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDonorResponse)
	err := c.cc.Invoke(ctx, NurseService_UpdateDonor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nurseServiceClient) DeleteDonor(ctx context.Context, in *DeleteDonorRequest, opts ...grpc.CallOption) (*DeleteDonorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDonorResponse)
	err := c.cc.Invoke(ctx, NurseService_DeleteDonor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nurseServiceClient) RegisterDonation(ctx context.Context, in *RegisterDonationRequest, opts ...grpc.CallOption) (*RegisterDonationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterDonationResponse)
	err := c.cc.Invoke(ctx, NurseService_RegisterDonation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nurseServiceClient) RegisterCheckup(ctx context.Context, in *RegisterCheckupRequest, opts ...grpc.CallOption) (*RegisterCheckupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterCheckupResponse)
	err := c.cc.Invoke(ctx, NurseService_RegisterCheckup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NurseServiceServer is the server API for NurseService service.
// All implementations must embed UnimplementedNurseServiceServer
// for forward compatibility
//
// ---------------- Service ----------------
type NurseServiceServer interface {
	// Donor
	CreateDonor(context.Context, *CreateDonorRequest) (*CreateDonorResponse, error)
	GetDonorById(context.Context, *GetDonorByIdRequest) (*GetDonorByIdResponse, error)
	ListDonors(context.Context, *ListDonorsRequest) (*ListDonorsResponse, error)
	UpdateDonor(context.Context, *UpdateDonorRequest) (*UpdateDonorResponse, error)
	DeleteDonor(context.Context, *DeleteDonorRequest) (*DeleteDonorResponse, error)
	// EVENTS
	RegisterDonation(context.Context, *RegisterDonationRequest) (*RegisterDonationResponse, error)
	RegisterCheckup(context.Context, *RegisterCheckupRequest) (*RegisterCheckupResponse, error)
	mustEmbedUnimplementedNurseServiceServer()
}

// UnimplementedNurseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNurseServiceServer struct {
}

func (UnimplementedNurseServiceServer) CreateDonor(context.Context, *CreateDonorRequest) (*CreateDonorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDonor not implemented")
}
func (UnimplementedNurseServiceServer) GetDonorById(context.Context, *GetDonorByIdRequest) (*GetDonorByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDonorById not implemented")
}
func (UnimplementedNurseServiceServer) ListDonors(context.Context, *ListDonorsRequest) (*ListDonorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDonors not implemented")
}
func (UnimplementedNurseServiceServer) UpdateDonor(context.Context, *UpdateDonorRequest) (*UpdateDonorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDonor not implemented")
}
func (UnimplementedNurseServiceServer) DeleteDonor(context.Context, *DeleteDonorRequest) (*DeleteDonorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDonor not implemented")
}
func (UnimplementedNurseServiceServer) RegisterDonation(context.Context, *RegisterDonationRequest) (*RegisterDonationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDonation not implemented")
}
func (UnimplementedNurseServiceServer) RegisterCheckup(context.Context, *RegisterCheckupRequest) (*RegisterCheckupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCheckup not implemented")
}
func (UnimplementedNurseServiceServer) mustEmbedUnimplementedNurseServiceServer() {}

// UnsafeNurseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NurseServiceServer will
// result in compilation errors.
type UnsafeNurseServiceServer interface {
	mustEmbedUnimplementedNurseServiceServer()
}

func RegisterNurseServiceServer(s grpc.ServiceRegistrar, srv NurseServiceServer) {
	s.RegisterService(&NurseService_ServiceDesc, srv)
}

func _NurseService_CreateDonor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDonorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NurseServiceServer).CreateDonor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NurseService_CreateDonor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NurseServiceServer).CreateDonor(ctx, req.(*CreateDonorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NurseService_GetDonorById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDonorByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NurseServiceServer).GetDonorById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NurseService_GetDonorById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NurseServiceServer).GetDonorById(ctx, req.(*GetDonorByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NurseService_ListDonors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDonorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NurseServiceServer).ListDonors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NurseService_ListDonors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NurseServiceServer).ListDonors(ctx, req.(*ListDonorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NurseService_UpdateDonor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDonorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NurseServiceServer).UpdateDonor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NurseService_UpdateDonor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NurseServiceServer).UpdateDonor(ctx, req.(*UpdateDonorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NurseService_DeleteDonor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDonorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NurseServiceServer).DeleteDonor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NurseService_DeleteDonor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NurseServiceServer).DeleteDonor(ctx, req.(*DeleteDonorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NurseService_RegisterDonation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDonationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NurseServiceServer).RegisterDonation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NurseService_RegisterDonation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NurseServiceServer).RegisterDonation(ctx, req.(*RegisterDonationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NurseService_RegisterCheckup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCheckupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NurseServiceServer).RegisterCheckup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NurseService_RegisterCheckup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NurseServiceServer).RegisterCheckup(ctx, req.(*RegisterCheckupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NurseService_ServiceDesc is the grpc.ServiceDesc for NurseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NurseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NurseService",
	HandlerType: (*NurseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDonor",
			Handler:    _NurseService_CreateDonor_Handler,
		},
		{
			MethodName: "GetDonorById",
			Handler:    _NurseService_GetDonorById_Handler,
		},
		{
			MethodName: "ListDonors",
			Handler:    _NurseService_ListDonors_Handler,
		},
		{
			MethodName: "UpdateDonor",
			Handler:    _NurseService_UpdateDonor_Handler,
		},
		{
			MethodName: "DeleteDonor",
			Handler:    _NurseService_DeleteDonor_Handler,
		},
		{
			MethodName: "RegisterDonation",
			Handler:    _NurseService_RegisterDonation_Handler,
		},
		{
			MethodName: "RegisterCheckup",
			Handler:    _NurseService_RegisterCheckup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/nurse-service/nurse-service.proto",
}
